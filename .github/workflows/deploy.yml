name: Build, Push, and Deploy to AWS ECS with Caching

on:
  push:
    branches: [main]

jobs:
  app:
    name: App (Backend) - Build, Push, Deploy
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-north-1
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY_APP: ${{ secrets.ECR_REPOSITORY_BACKEND }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache app node modules
        uses: actions/cache@v3
        with:
          path: app/node_modules
          key: app-node-modules-${{ hashFiles('app/package-lock.json') }}
          restore-keys: |
            app-node-modules-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build app Docker image
        run: |
          docker build -t app ./app

      - name: Tag and push app image
        run: |
          APP_REPO=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_APP
          docker tag app $APP_REPO:latest
          docker push $APP_REPO:latest

      - name: Deploy app to ECS
        run: |
          CLUSTER_NAME="your-app-cluster"
          SERVICE_NAME="your-app-service"
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment --region $AWS_REGION

  frontend:
    name: Frontend - Build, Push, Deploy
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-north-1
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY_FRONTEND: ${{ secrets.ECR_REPOSITORY_FRONTEND }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache frontend node modules
        uses: actions/cache@v3
        with:
          path: webapp/node_modules
          key: frontend-node-modules-${{ hashFiles('webapp/package-lock.json') }}
          restore-keys: |
            frontend-node-modules-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build frontend Docker image
        run: |
          docker build -t frontend ./webapp

      - name: Tag and push frontend image
        run: |
          FRONTEND_REPO=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_FRONTEND
          docker tag frontend $FRONTEND_REPO:latest
          docker push $FRONTEND_REPO:latest

      - name: Deploy frontend to ECS
        run: |
          CLUSTER_NAME="your-frontend-cluster"
          SERVICE_NAME="your-frontend-service"
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment --region $AWS_REGION
